int al_add(ArrayList* pList,void* pElement)
{
    void* auxElements;
    int returnAux = -1;
    if(pList != NULL && pElement != NULL)
    {
        if(pList->size == pList->reservedSize)
        {
            auxElements= realloc(pList->pElements,sizeof(void *) * (pList->size+AL_INCREMENT));
            if (auxElements != NULL)
            {
                pList->pElements = auxElements;
                pList->reservedSize = pList->reservedSize + AL_INCREMENT;
            }
        }
            pList->pElements[pList->size] = pElement;
            pList->size=pList->size+1;
            returnAux=0;
    }
    return returnAux;
}

Mejorado

int al_add(ArrayList* pList,void* pElement)
{
    int hayMemoria=1;
    void* auxElements;
    int returnAux = -1;
    if(pList != NULL && pElement != NULL)
    {
        if(pList->size == pList->reservedSize)
        {
            auxElements= realloc(pList->pElements,sizeof(void *) * (pList->size+AL_INCREMENT));
            if (auxElements != NULL)
            {
                pList->pElements = auxElements;
                pList->reservedSize = pList->reservedSize + AL_INCREMENT;
            }
            else { hayMemoria=0; }
        }
        if(hayMemoria)
        {
            pList->pElements[pList->size] = pElement;
            pList->size=pList->size+1;
            returnAux=0;
        }
    }
    return returnAux;
}



/** \brief  Get an element by index
 * \param pList ArrayList* Pointer to arrayList
 * \param index int Index of the element
 * \return void* Return (NULL) if Error [pList is NULL pointer or invalid index] - (Pointer to element) if Ok
 *
 */
void* al_get(ArrayList* pList , int index)
{
    int i = 0;
    void* returnAux = NULL;
    if(pList != NULL && index >= 0)
    {
        for(i=0; i<pList->size; i++)
        {
            if(index==i)
            {
                returnAux = pList->pElements[i];
            }
        }
    }
    return returnAux;
}


Mejorado


void* al_get(ArrayList* pList , int index)
{
    int i = 0;
    void* returnAux = NULL;
    if(pList != NULL && index >= 0)
    {
        if(index<pList->size)
        returnAux = *(pList->pElements+index);
    }
    return returnAux;
}



int al_contains(ArrayList* pList, void* pElement)
{
    int returnAux = -1,i;
        if(pList != NULL && pElement != NULL)
        {
            returnAux = 0;
            for(i=0;i<pList->size;i++)
            {
                if(pList->pElements[i]==pElement)
                {
                    returnAux = 1;
                    break;
                }
            }
        }
    return returnAux;
}



/** \brief Increment the number of elements in pList in AL_INCREMENT elements.
 * \param pList ArrayList* Pointer to arrayList
 * \return int Return (-1) if Error [pList is NULL pointer or if can't allocate memory]
 *                  - (0) if ok
 */
int resizeUp(ArrayList* pList)
{
    void* auxElements;
    int returnAux = -1;
    if(pList =! NULL)
    {
        auxElements = realloc(pList->pElements,sizeof(void *) * (pList->size+AL_INCREMENT));
        if(auxElements =! NULL)
        {
            pList->pElements = auxElements;
            pList->reservedSize = pList->size + AL_INCREMENT;
            returnAux = 0;
        }
    }
    return returnAux;
}




/** \brief  Expand an array list
 * \param pList ArrayList* Pointer to arrayList
 * \param index int Index of the element
 * \return int Return (-1) if Error [pList is NULL pointer or invalid index]
 *                  - ( 0) if Ok
 */
int expand(ArrayList* pList,int index)
{
    int i = 0;
    int hayMemoria = 1;
    int returnAux = -1;

    if(pList =! NULL && index >= 0 && index < pList->size)
    {
        if (pList->size == pList->reservedSize)
        {
            if(!resizeUp(pList))
            {
                hayMemoria = 0;
            }
        }
        if(hayMemoria == 1)
        {
            for(i = pList->size; i<index; i--)
            {
                pList->pElements[i+1] = pList->pElements[i];
            }
        }
    }
    return returnAux;
}




/** \brief  Contract an array list
 * \param pList ArrayList* Pointer to arrayList
 * \param index int Index of the element
 * \return int Return (-1) if Error [pList is NULL pointer or invalid index]
 *                  - ( 0) if Ok
 */
int contract(ArrayList* pList,int index)
{
    int i = 0;
    int hayMemoria = 1;
    int returnAux = -1;

    if(pList =! NULL && index >= 0 && index < pList->size)
    {
        if (pList->size == pList->reservedSize)
        {
            if(!resizeUp(pList))
            {
                hayMemoria = 0;
            }
        }
        if(hayMemoria == 1)
        {
            for(i = index+1; i > pList->size; i--)
            {
                pList->pElements[i-1] = pList->pElements[i];
            }
        }
    }
    return returnAux;
}


este es el get bien echo: 
                       
if(pList != NULL && index >= 0)
    {
        if(index<pList->size)
        returnAux = pList->pElements[index];
    }
    return returnAux;

    return returnAux;


la funcion al_contract está mal   
                     
int contract(ArrayList* pList,int index)
{
    int i = 0;
    int returnAux = -1;

    if(pList =! NULL && index >= 0 && index < pList->size)
    {
        returnAux = 0;
        for(i = index+1; i > pList->size; i--)
        {
            pList->pElements[i-1] = pList->pElements[i];
        }
    }
    return returnAux;
}
                        
es así





